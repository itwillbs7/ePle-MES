<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- shipmentMapper.xml -->
<mapper namespace="com.itwillbs.mapper.shipmentMapper">

	<!-- 페이징처리 + 리스트 가져오기 -->
	<select id="listPage" resultType="ShipmentVO">
		select sp.*, c.name clientName, s.amount stock 
		from SHIPMENT sp 
		join REQUEST r on r.code = sp.reqs_code 
		inner join CLIENT c on c.code = r.client_code 
		inner join STOCK s on s.mapd_code = r.product 
		order by sp.reg_date DESC 
		limit #{startPage}, #{pageSize}
	</select>
	
	<!-- 전체 글 개수 조회 -->
	<select id="countShipment" resultType="int">
  <![CDATA[
  	select count(*) from SHIPMENT where 1=1
  ]]>
	</select>

	<!-- 출하번호의 정보 가져오기 -->
	<select id="getShipmentInfo" resultType="ShipmentVO">
		SELECT sp.*, c.name clientName
		from SHIPMENT sp
		join REQUEST r on r.code = sp.reqs_code
		inner join CLIENT c on c.code = r.client_code
		where sp.code = #{code}

	</select>
	
	<!-- 출하정보 검색하기 -->
	<select id="research" resultType="ShipmentVO">
		select sp.*, c.name clientName, s.amount stock 
		from SHIPMENT sp 
		join REQUEST r on r.code = sp.reqs_code 
		inner join CLIENT c on c.code = r.client_code 
		inner join STOCK s on s.mapd_code = r.product 
		where 1 = 1
		<if test="clientName neq null and clientName.toString() neq '' "> AND r.client_code = #{client_code} </if>
		<if test="productName neq null and productName.toString() neq ''"> AND m.name = #{productName} </if>
		<if test="date neq null and date.toString() neq '' "> 
		<choose>
			<when test="endDate neq null and endDate.toString() neq '' ">AND r.date between #{startDate} and #{endDate} </when>
			<otherwise>ND r.date = #{startDate} </otherwise>
		</choose>
		</if>
		<if test="statusList != null and statusList.size() > 0" >
		 AND sp.status in 
		 <foreach collection="statusList" item="status" open="(" close=")" separator=",">
		 #{status} 
		 </foreach>
		 </if>
		order by r.reg_date DESC 
	</select>

	<!-- 회사찾기 -->
	<select id="getClientList" resultType="RequestVO">
		select code client_code, name clientName from CLIENT where active = 0;
	</select>

	<select id="findCompany" resultType="RequestVO">
		select code client_code, name clientName from CLIENT where active = 0
		<if test="client_code!= null"> AND code like concat('%',#{client_code},'%') </if>
		<if test="clientName != null"> AND name like concat('%',#{clientName},'%') </if>
	</select>

	<select id="getProductList" resultType="RequestVO">
		select m.code product, m.name productName, m.unit, s.amount stock
		from MAPD m join STOCK s on m.code = s.mapd_code where m.active = 0
	</select>

	<!-- 물품찾기 -->
	<select id="findProduct" resultType="RequestVO">
		select m.code product, m.name productName, s.amount stock, s.code ware_code 
		from MAPD m join STOCK s on m.code = s.mapd_code where m.active = 0
		<if test="product != null and product != ''">AND m.code like concat('%',#{product},'%')</if>
		<if test="productName != null and productName != ''">AND m.name like concat('%',#{productName},'%')</if>
	</select>
	
	
	<!-- 출하정보 등록하기 -->
	<insert id="insertShipment">
		insert into SHIPMENT
		values
		(#{code},#{reqs_code},#{date},#{ware_code},#{amount}, 
		"출하대기",0,now(),"test",now(),"test",#{stock_code});
	</insert>

	<!-- 출하정보 수정하기 -->
	<update id="updateShipmentInfo">
		update SHIPMENT set reqs_code=#{vo.reqs_code}, date=#{vo.date}, 
		ware_code=#{vo.ware_code}, amount=#{vo.amount}, status=#{vo.status}, 
		update_date=now(), update_emp=#{userid}
		where code = #{vo.code}
	</update>
	
	<!-- 출하정보 삭제하기 -->
		<select id="getDeleteInfo" resultType="ShipmentVO">
		SELECT sp.*, c.name clientName
		from SHIPMENT sp
		join REQUEST r on r.code = sp.reqs_code
		inner join CLIENT c on c.code = r.client_code
		where sp.code in
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		 </foreach>
	</select>
	
	<delete id="deleteShipmentData">
		delete from SHIPMENT
		where code in 
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		</foreach>
	</delete>

</mapper>