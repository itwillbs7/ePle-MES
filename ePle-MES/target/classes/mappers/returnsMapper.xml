<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- returnsMapper.xml -->
<mapper namespace="com.itwillbs.mapper.returnsMapper">
	<!-- 페이징처리 + 리스트 가져오기 -->
	<select id="listPage" resultType="ReturnsVO">
		select rt.*
		FROM RETURNS rt 
		join REQUEST r on rt.request_code = r.code 
		order by rt.reg_date DESC 
		limit #{startPage}, #{pageSize}
	</select>
	
	<!-- 전체 글 개수 조회 -->
	<select id="countReturns" resultType="int">
  <![CDATA[
  	select count(*) from RETURNS where 1=1
  ]]>
	</select>

	<!-- 반품번호의 정보 가져오기 -->
	<select id="getReturnsInfo" resultType="ReturnsVO">
		SELECT rt.*,c.name clientName, r.deadline. s.amount
		from RETURNS rt 
		join REQUEST r on rt.request_code = r.code  
		join CLIENT c on r.client_code = c.code 
		join SHIPMENT s on s.code = rt.ship_code 
		where rt.code = #{code} 

	</select>
	
	
	<!-- ================================================================= add/search -->
	<!-- 출하번호 검색하기(출하번호,수주번호,출하량, 출하일자,수주업체 -->
	<select id="selectShipmentCodeList" resultType="ShipmentVO">
		select s.code code, s.reqs_code reqs_code, s.amount amount, s.date date, c.name clientName
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on c.code = r.client_code
		where s.status = '출하완료'
		<if test="code != null"> AND s.code = #{code} </if>
	</select>
	
	<select id="findShipment" resultType="ShipmentVO">
		select s.code, s.reqs_code, s.amount, s.date, c.name
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on c.code = r.client_code
		where s.status = '출하완료'
		<if test="client_code!= null"> AND code like concat('%',#{client_code},'%') </if>
		<if test="clientName != null"> AND name like concat('%',#{clientName},'%') </if>
	</select>
	
	<!-- ================================================================= add/search -->
	
	
	
	
	<!-- 반품정보 검색하기 -->
	<select id="research" resultType="ReturnsVO">
		select rt.*,c.name clientName, r.deadline. s.amount
		from RETURNS rt
		join REQUEST r on rt.request_code = r.code 
		join CLIENT c on c.code = r.client_code 
		join SHIPMENT s on s.code = rt.ship_code 
		join LOT l on rt.lot = l.lot 
		where 1 = 1
		<if test="clientName neq null and clientName.toString() neq '' "> AND r.client_code = #{client_code} </if>
		<if test="product neq null and product.toString() neq ''"> AND s.mapd_code = #{product} </if>
		<if test="date neq null and date.toString() neq '' "> 
		<choose>
			<when test="endDate neq null and endDate.toString() neq '' ">AND r.date between #{startDate} and #{endDate} </when>
			<otherwise>ND r.date = #{startDate} </otherwise>
		</choose>
		</if>
		<if test="statusList != null and statusList.size() > 0" >
		 AND sp.status in 
		 <foreach collection="statusList" item="status" open="(" close=")" separator=",">
		 #{status} 
		 </foreach>
		 </if>
		order by r.reg_date DESC 
	</select>


	<!-- 반품정보 등록하기 -->
	<insert id="insertReturns">
		insert into RETURNS
		values
		(#{code},#{requset_code},#{ship_code},#{lot},#{date},#{amount},#{unit},
		"등록",1,now(),"test",now(),"test");
	</insert>

	<!-- 반품정보 수정하기 -->
	<update id="updateReturnsInfo">
		update SHIPMENT set requset_code=#{vo.requset_code}, ship_code=#{vo.ship_code}, 
		lot=#{vo.lot}, date=#{date}, amount=#{vo.amount}, unit=#{unit}, status=#{vo.status}, 
		update_date=now(), update_emp=#{userid}
		where code = #{vo.code}
	</update>
	
	<!-- 반품정보 삭제하기 -->
		<select id="getDeleteInfo" resultType="ReturnsVO">
		SELECT r.code, r.request_code , c.name clientName, r.lot, r.amount
		from RETURNS r
		join REQUEST rq on r.request_code = rq.code
		join CLIENT c on rq.client_code = c.code
		where r.code in 
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		 </foreach>
	</select>
	
	<delete id="deleteReturnsData">
		delete from SHIPMENT
		where code in 
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		</foreach>
	</delete>
	
	<!-- 반품상태 폐기수정 -->
	<update id="statusChangetoDispose">
		update RETURNS set status="폐기완료", dispose=1
		where code in 
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		</foreach>
	</update>
</mapper>