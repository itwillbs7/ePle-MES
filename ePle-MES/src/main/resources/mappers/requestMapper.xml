<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--requestMapper.xml -->
<mapper namespace="com.itwillbs.mapper.requestMapper">
	<resultMap type="com.itwillbs.domain.RequestVO" id="requestMap">
		<result property="code" column="r.code"/>
		<result property="clientName" column="c.name"/>
		<result property="product" column="r.product"/>
		<result property="productName" column="m.name"/>
		<result property="stock" column="s.total"/>
		<result property="status" column="r.status"/>
		<result property="amount" column="r.amount"/>
	</resultMap>

	<select id="listPage" resultType="RequestVO" >
	  <![CDATA[
		SELECT r.*, c.name clientName, m.name productName, SUM(s.total) stock
FROM REQUEST r 
JOIN CLIENT c ON r.client_code = c.code 
JOIN STOCK_VIEW s ON r.product = s.code 
JOIN MAPD m ON r.product = m.code 
WHERE r.status = '등록'
GROUP BY r.code, c.name, m.name
HAVING SUM(s.total) < r.amount
ORDER BY r.reg_date DESC
		LIMIT #{startPage},#{pageSize}
		  ]]>
		
	</select>
	
		<!-- 전체 글 개수 조회 -->
	<select id="countRequest" resultType="int">
  <![CDATA[
  	SELECT COUNT(*) 
	FROM (
  	SELECT r.code
 	 FROM REQUEST r 
 	 JOIN CLIENT c ON r.client_code = c.code 
 	 JOIN STOCK_VIEW s ON r.product = s.code 
 	 JOIN MAPD m ON r.product = m.code 
 	 WHERE r.status = '등록'
 	 GROUP BY r.code, c.name, m.name, r.amount
 	 HAVING SUM(s.total) < r.amount
	) AS subquery
  ]]>
	</select>
	
	<!-- 수주정보 검색하기 -->
	<select id="research" resultType="RequestVO" parameterType="hashMap">
		SELECT r.*, c.name clientName, m.name productName, SUM(s.total) stock
		FROM REQUEST r 
		JOIN CLIENT c ON r.client_code = c.code 
		JOIN STOCK_VIEW s ON r.product = s.code 
		JOIN MAPD m ON r.product = m.code 
		where 1 = 1
		<if test="vo.clientName != null and vo.clientName.toString() != '' ">
		 AND c.name = #{vo.clientName} </if>
		<if test="vo.productName != null and vo.productName.toString() != ''">
		 AND m.name = #{vo.productName} </if>
		<if test="(vo.startDate!= null and vo.startDate.toString() != '') or (vo.endDate != null and vo.endDate.toString() != '') ">
			<choose>
				<when
					test="(vo.endDate != null and vo.endDate.toString() != '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
					AND r.date between #{vo.startDate} and #{vo.endDate}
				</when>
				<when test="(vo.endDate == null or vo.endDate.toString() == '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
				<![CDATA[
					AND r.date >= #{vo.startDate}
      			  ]]>
				</when>
				<when test="vo.endDate != null or vo.endDate.toString() != ''">
				<![CDATA[
					AND r.date <= #{vo.endDate}
      			  ]]>
				</when>
			</choose>
		</if>	
		<if test="(vo.startDead != null and vo.startDead.toString() != '') or (vo.endDead != null and vo.endDead.toString() != '')">
		<choose>
  		  <when test="(vo.startDead != null and vo.startDead.toString() != '') and (vo.endDead != null and vo.endDead.toString() != '')">
   		     AND r.deadline between #{vo.startDead} and #{vo.endDead} 
 		   </when>
  		  <when test="(vo.endDead == null or vo.endDead.toString() == '') and (vo.startDead != null and vo.startDead.toString() != '')">
   		     <![CDATA[
    	        AND r.deadline >= #{vo.startDead } 
       		 ]]>
   		 </when>
   		 <when test="vo.endDead != null and vo.endDead.toString() != ''">
      		  <![CDATA[
        	    AND r.deadline <= #{vo.endDead} 
     		   ]]>
   		 </when>
		</choose>
		 </if>
		<if test="vo.manager neq null and vo.manager.toString() neq '' "> AND r.manager = #{vo.manager} </if>
		<if test="vo.statusList != null and vo.statusList.size() > 0" >
		 AND r.status in 
		 <foreach collection="vo.statusList" item="status" open="(" close=")" separator=",">
		 #{status} 
		 </foreach>
		 </if>
		 GROUP BY r.code, c.name, m.name
		 order by r.reg_date DESC 
		 LIMIT #{cri.startPage},#{cri.pageSize}
	</select>
	
	<!-- 검색 글 개수 조회 -->
  <select id="countSearch" resultType="int" parameterType="hashMap">
  <![CDATA[
    SELECT COUNT(*) 
  FROM (
    SELECT r.code, c.name clientName, m.name productName, r.date, r.deadline, r.manager, r.status
    FROM REQUEST r 
    JOIN CLIENT c ON r.client_code = c.code 
    JOIN STOCK_VIEW s ON r.product = s.code 
    JOIN MAPD m ON r.product = m.code 
    WHERE 1=1
  ]]>
 		<if test="vo.clientName neq null and vo.clientName.toString() neq '' ">
		 AND c.name = #{vo.clientName} </if>
		<if test="vo.productName neq null and vo.productName.toString() neq ''">
		 AND m.name = #{vo.productName} </if>
		<if test="(vo.startDate!= null and vo.startDate.toString() != '') or (vo.endDate != null and vo.endDate.toString() != '') ">
			<choose>
				<when test="(vo.endDate != null and vo.endDate.toString() != '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
					AND r.date between #{vo.startDate} and #{vo.endDate}
				</when>
				<when test="(vo.endDate == null or vo.endDate.toString() == '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
				<![CDATA[
					AND r.date >= #{vo.startDate}
      			  ]]>
				</when>
				<when test="vo.endDate != null or vo.endDate.toString() != ''">
				<![CDATA[
					AND r.date <= #{vo.endDate}
      			  ]]>
				</when>
			</choose>
		</if>		
		<if test="(vo.startDead != null and vo.startDead.toString() != '') or (vo.endDead != null and vo.endDead.toString() != '')">
		<choose>
  		  <when test="(vo.startDead != null and vo.startDead.toString() != '') and (vo.endDead != null and vo.endDead.toString() != '')">
   		     AND r.deadline between #{vo.startDead} and #{vo.endDead} 
 		   </when>
  		  <when test="(vo.endDead == null or vo.endDead.toString() == '') and (vo.startDead != null and vo.startDead.toString() != '')">
   		     <![CDATA[
    	        AND r.deadline >= #{vo.startDead } 
       		 ]]>
   		 </when>
   		 <when test="(vo.startDead == null or vo.startDead.toString() == '') and (vo.endDead != null and vo.endDead.toString() != '')">
      		  <![CDATA[
        	    AND r.deadline <= #{vo.endDead} 
     		   ]]>
   		 </when>
		</choose>
		 </if>
		<if test="vo.manager neq null and vo.manager.toString() neq '' "> AND r.manager = #{vo.manager} </if>
		<if test="vo.statusList != null and vo.statusList.size() > 0" >
		 AND r.status in 
		 <foreach collection="vo.statusList" item="status" open="(" close=")" separator=",">
		 #{status} 
		 </foreach>
		 </if>
  <![CDATA[
    GROUP BY r.code, c.name, m.name
  ) AS subquery
  ]]>
</select>

	
	<!-- 수주번호의 정보 가져오기 -->
	<select id="getRequestInfo" resultType="RequestVO">
		SELECT DISTINCT r.*, c.name clientName, m.name productName, SUM(s.total) stock
		FROM REQUEST r
		LEFT JOIN CLIENT c on r.client_code = c.code
		LEFT join MAPD m on r.product = m.code
        LEFT join STOCK_VIEW s on s.code = r.product
		where r.code = #{code}
		GROUP BY r.code, c.name, m.name 
	</select>
	
	<select id="getManagerName" resultType="String">
		select name managerName from EMPLOYEES
		where code = #{manager}
	</select>


<!-- ============================ add / search ====================== -->
	<!-- 회사찾기 -->
	<select id="getClientList" resultType="RequestVO">
		select code client_code, name clientName from CLIENT 
		where active = 1 AND type = '납품처' LIMIT #{startPage},#{pageSize}
	</select>
	
	<select id="getClientCount" resultType="int">
	<![CDATA[
		select count(*) from CLIENT where active = 1 AND type = '납품처'
		  ]]>
		<if test="client_code != null"> AND code like concat('%',#{client_code},'%') </if>
		<if test="clientName != null"> AND name like concat('%',#{clientName},'%') </if>
	</select>

	<select id="findCompany" resultType="RequestVO">
		select code client_code, name clientName from CLIENT where active = 1
		<if test="client_code!= null"> AND code like concat('%',#{client_code},'%') </if>
		<if test="clientName != null"> AND name like concat('%',#{clientName},'%') </if>
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>

	<select id="getManagerList" resultType="RequestVO">
		select code manager, name managerName
		from EMPLOYEES
		where dep_group = '영업'
		LIMIT #{startPage},#{pageSize}
	</select>
	
	<select id="getManagerCount" resultType="int">
	<![CDATA[
		select count(*) from EMPLOYEES where dep_group  = '영업'
		]]>
		<if test="manager != null"> AND code like concat('%',#{manager},'%')</if>
		<if test="managerName != null">AND name like concat('%',#{managerName},'%')</if>
	</select>

	<select id="findManager" resultType="RequestVO">
		select code manager, name managerName
		from EMPLOYEES
		where dep_group = '영업'
		<if test="manager != null"> AND code like concat('%',#{manager},'%')</if>
		<if test="managerName != null">AND name like concat('%',#{managerName},'%')</if>
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>

	<select id="getProductList" resultType="RequestVO">
		select m.code product, m.name productName, m.unit, m.outprice currency,
		SUM(s.total) stock
		from MAPD m join STOCK_VIEW s on m.code = s.code 
		where m.active = 1
		and m.code_id = '003' and m.group_id ='PROD'
		GROUP BY m.code, m.name, m.unit, m.outprice
		LIMIT #{startPage},#{pageSize}
	</select>
	
	<select id="getProductCount" resultType="int">
	<![CDATA[
		select count(*) 
		from MAPD m join STOCK_VIEW s on m.code = s.code where m.active = 1
		and m.code_id = '003' and m.group_id ='PROD'
		]]>
		<if test="product != null and product != ''">AND m.code like concat('%',#{product},'%')</if>
		<if test="productName != null and productName != ''">AND m.name like concat('%',#{productName},'%')</if>
	</select>

	<select id="findProduct" resultType="RequestVO">
		select m.code product, m.name productName, m.unit, m.outprice
		currency, SUM(s.total) stock
		from MAPD m join STOCK_VIEW s on m.code = s.code 
		join WAREHOUSE_HISTORY wh on m.code = wh.mapd_code
		where m.active = 1 and wh.category = '완제품'
		<if test="product != null and product != ''">AND m.code like concat('%',#{product},'%')</if>
		<if test="productName != null and productName != ''">AND m.name like concat('%',#{productName},'%')</if>
		GROUP BY m.code, m.name, m.unit, m.outprice
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>
	
<!-- ============================ add / search ====================== -->

	<!-- 수주번호 가져오기 -->
	<select id="getRecentCode" resultType="String">
		SELECT code FROM REQUEST WHERE code LIKE concat(#{result},'%') ORDER BY reg_date DESC LIMIT 0, 1
	</select>
	
	<!-- 수주정보 등록하기 -->
	<insert id="insertRequest">
		insert into REQUEST
		values
		(#{code},#{client_code},#{deadline},#{date},#{manager},#{product},#{amount},
		#{unit},#{currency},"등록",0,now(),#{reg_emp},now(),#{reg_emp});
	</insert>

	<!-- 수주정보 수정하기 -->
	<update id="updateRequestInfo">
		update REQUEST set client_code=#{vo.client_code}, deadline=#{vo.deadline}, date=#{vo.date}, 
		manager=#{vo.manager}, product=#{vo.product}, unit=#{vo.unit}, amount=#{vo.amount},
		currency=#{vo.currency}, status=#{vo.status}, 
		update_date=now(), update_emp=#{userid}
		where code = #{vo.code}
	</update>
	
	<!-- 수주정보 삭제하기 -->
		<select id="getDeleteInfo" resultType="RequestVO">
		SELECT DISTINCT r.*, c.name clientName, m.name productName, e.name managerName
		FROM REQUEST r
		LEFT JOIN CLIENT c on r.client_code = c.code
		JOIN EMPLOYEES e on r.manager = e.code 
		LEFT join MAPD m on r.product = m.code
		where r.code in
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		 </foreach>
	</select>
	
	<delete id="deleteRequestData">
		delete from REQUEST
		where code in 
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
		 #{codeNum}
		</foreach>
	</delete>
	
	
</mapper>