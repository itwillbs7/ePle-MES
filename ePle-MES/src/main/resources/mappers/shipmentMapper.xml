<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- shipmentMapper.xml -->
<mapper namespace="com.itwillbs.mapper.shipmentMapper">

	<!-- 페이징처리 + 리스트 가져오기 -->
	<select id="listPage" resultType="ShipmentVO">
		select sp.*, c.name clientName,
		r.deadline reqsdate,
		r.product product , r.amount reqsamount
		from SHIPMENT sp
		join REQUEST r on r.code
		= sp.reqs_code
		inner join CLIENT c on c.code = r.client_code
		order by
		sp.reg_date DESC
		limit #{cri.startPage}, #{cri.pageSize}
	</select>

	<!-- 전체 글 개수 조회 -->
	<select id="countShipment" resultType="int">
        <![CDATA[
        select count(*) 
        from (
        SELECT sp.code
        FROM SHIPMENT sp
        JOIN REQUEST r on r.code = sp.reqs_code
        INNER JOIN CLIENT c on c.code = r.client_code
        INNER JOIN STOCK_VIEW s on s.code = r.product
        GROUP BY sp.code, c.name, r.deadline, r.product, r.amount
        ) AS subquery
        ]]>
	</select>
	<!-- 전체 글 개수 조회 -->
	<select id="countSearch" resultType="int">
        <![CDATA[
       select count(*) 
        from (
        SELECT sp.code
        FROM SHIPMENT sp
        JOIN REQUEST r on r.code = sp.reqs_code
        INNER JOIN CLIENT c on c.code = r.client_code
        INNER JOIN STOCK_VIEW s on s.code = r.product 
        ]]>
		<if test="vo.clientName != null and vo.clientName.toString() != ''">
			AND c.name = #{vo.clientName}
		</if>
		<if test="vo.product != null and vo.product.toString() != ''">
			AND s.code = #{vo.product}
		</if>
		<if test="(vo.startDate!= null and vo.startDate.toString() != '') or (vo.endDate != null and vo.endDate.toString() != '') ">
			<choose>
				<when
					test="(vo.endDate != null and vo.endDate.toString() != '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
					AND sp.date between #{vo.startDate} and #{vo.endDate}
				</when>
				<when test="(vo.endDate == null or vo.endDate.toString() == '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
				<![CDATA[
					AND sp.date >= #{vo.startDate}
     		   ]]>
				</when>
				<when test="vo.endDate != null or vo.endDate.toString() != ''">
				<![CDATA[
					AND sp.date <= #{vo.endDate}
      			  ]]>
				</when>
			</choose>
		</if>
		<if test="vo.statusList != null and vo.statusList.size() > 0">
			AND sp.status in
			<foreach collection="vo.statusList" item="status" open="("
				close=")" separator=",">
				#{status}
			</foreach>
		</if>
		  <![CDATA[
		GROUP BY sp.code, c.name, r.deadline, r.product, r.amount
        ) AS subquery
          ]]>

	</select>

	<!-- 출하번호의 정보 가져오기 -->
	<select id="getShipmentInfo" resultType="ShipmentVO">
		SELECT sp.*,
		SUM(s.total) stock
		from SHIPMENT sp
		join REQUEST r on r.code =
		sp.reqs_code
		join STOCK_VIEW s on r.product = s.code
		where sp.code =
		#{code}
		GROUP BY sp.code
	</select>

	<!-- 출하정보 검색하기 -->
	<select id="research" resultType="ShipmentVO">
		select sp.*, c.name clientName,
		SUM(s.total) stock , r.deadline
		reqsdate, r.product product , r.amount reqsamount
		from SHIPMENT sp
		join
		REQUEST r on r.code = sp.reqs_code
		inner join CLIENT c on c.code =
		r.client_code
		inner join STOCK_VIEW s on s.code = r.product
		where 1 = 1
		<if test="vo.clientName != null and vo.clientName.toString() != ''">
			AND c.name = #{vo.clientName}
		</if>
		<if test="vo.product != null and vo.product.toString() != ''">
			AND s.code = #{vo.product}
		</if>
		<if test="(vo.startDate!= null and vo.startDate.toString() != '') or (vo.endDate != null and vo.endDate.toString() != '') ">
			<choose>
				<when
					test="(vo.endDate != null and vo.endDate.toString() != '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
					AND sp.date between #{vo.startDate} and #{vo.endDate}
				</when>
				
				<when test="(vo.endDate == null or vo.endDate.toString() == '') and (vo.startDate!= null and vo.startDate.toString() != '') ">
				<![CDATA[
					AND sp.date >= #{vo.startDate}
      			  ]]>
				</when>
				<when test="vo.endDate != null or vo.endDate.toString() != ''">
				<![CDATA[
					AND sp.date <= #{vo.endDate}
      			  ]]>
				</when>
			</choose>
		</if>
		<if test="vo.statusList != null and vo.statusList.size() > 0">
			AND sp.status in
			<foreach collection="vo.statusList" item="status" open="("
				close=")" separator=",">
				#{status}
			</foreach>
		</if>
		GROUP BY sp.code, c.name, r.deadline, r.product, r.amount
		order by
		sp.reg_date DESC
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>

	<!-- ================= add/search -->


	<!-- 수주정보 찾기 -->
	<select id="getRequestList" resultType="RequestVO">
		SELECT r.*, c.name
		clientName, m.name productName, s.total stock, s.warehouse ware_code,
		r.unit unit
		FROM REQUEST r
		LEFT JOIN CLIENT c ON r.client_code = c.code
		RIGHT JOIN (
		SELECT s.*, ROW_NUMBER() OVER(PARTITION BY s.code ORDER BY s.total DESC) rn
		FROM STOCK_VIEW s
		) s ON r.product = s.code AND s.rn = 1
		LEFT JOIN MAPD m ON r.product = m.code
		WHERE r.status IN ('등록', '생산진행') AND s.total >= r.amount
		and c.code not like 'ePle'
		LIMIT #{startPage},#{pageSize}
	</select>

	<select id="getRequestCount" resultType="int">
		SELECT count(*)
		FROM REQUEST r
		LEFT JOIN CLIENT c ON r.client_code = c.code
		RIGHT JOIN (
		SELECT s.*, ROW_NUMBER() OVER(PARTITION BY s.code ORDER BY s.total DESC) rn
		FROM STOCK_VIEW s
		) s ON r.product = s.code AND s.rn = 1
		LEFT JOIN MAPD m ON r.product = m.code
		WHERE r.status IN ('등록', '생산진행') AND s.total >= r.amount
		and c.code not like 'ePle'
		<if test="clientName != null and clientName!= ''">AND c.name like concat('%',#{clientName},'%')</if>
		<if test="productName != null and productName != ''">AND m.name like concat('%',#{productName},'%')</if>
	</select>

	<select id="findRequest" resultType="RequestVO">
		SELECT r.*, c.name clientName, m.name productName, s.total stock ,
		s.warehouse ware_code ,
		r.unit unit
		FROM REQUEST r
		LEFT JOIN CLIENT c on
		r.client_code = c.code
		RIGHT join STOCK_VIEW s on r.product = s.code
		LEFT join MAPD m on r.product = m.code
		where status in ('등록','생산진행')
		and s.total >= r.amount
		and c.code not like 'ePle'
		<if test="clientName != null and clientName!= ''">AND c.name like concat('%',#{clientName},'%')</if>
		<if test="productName != null and productName != ''">AND m.name like concat('%',#{productName},'%')</if>
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>
	<!-- ========================================================= add/search -->

	<!-- 수주번호 가져오기 -->
	<select id="getRecentCode" resultType="String">
		SELECT code FROM SHIPMENT
		WHERE code LIKE concat(#{result},'%') ORDER BY reg_date DESC LIMIT 0,
		1
	</select>
	<!-- 수주번호 가져오기 -->
	<select id="getRecentHistory" resultType="String">
		SELECT code FROM
		WAREHOUSE_HISTORY WHERE code LIKE concat(#{vocode},'%') ORDER BY code
		DESC LIMIT 0, 1
	</select>


	<!-- 출하정보 등록하기 -->
	<insert id="insertShipment">
		insert into SHIPMENT
		values
		(#{code},#{reqs_code},#{date},#{ware_code},#{amount},
		"출하대기",now(),#{reg_emp},now(),#{reg_emp});
	</insert>

	<update id="updateRequestStatus">
		update REQUEST
		set status = '출하대기'
		where code =
		#{request}
	</update>

	<!-- 출하정보 수정하기 -->
	<update id="updateShipmentInfo">
		update SHIPMENT set reqs_code=#{vo.reqs_code},
		date=#{vo.date}, ware_code=#{vo.ware_code}, amount=#{vo.amount},
		status=#{vo.status}, update_date=now(), update_emp=#{userid}
		where code
		= #{vo.code}
	</update>

	<update id="updateBeforeUpdate">
		update REQUEST
		set status = '등록'
		where code =
		#{request}
	</update>

	<update id="updateBeforeUpdate2">
		update REQUEST
		set status = '출하대기'
		where code =
		#{request}
	</update>

	<!-- 출하정보 삭제하기 -->
	<select id="getDeleteInfo" resultType="ShipmentVO">
		SELECT sp.*, c.name clientName, m.name product
		from SHIPMENT sp
		join
		REQUEST r on r.code = sp.reqs_code
		inner join CLIENT c on c.code =
		r.client_code
		inner join MAPD m on m.code = r.product
		where sp.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</select>
		
	<update id="updateStatusBeforeDelete">
		update REQUEST r
		inner join SHIPMENT s on r.code= s.reqs_code
		set
		r.status = '등록'
		where s.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>

	<delete id="deleteShipmentData">
		delete from SHIPMENT
		where code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</delete>

	<!-- LOT 번호 얻기(전체) -->
	<select id="getLOT" resultType="java.util.HashMap">
		SELECT * FROM (
		SELECT inWH.lot, inWH.inAmount - IFNULL(outWH.outAmount, 0) AS Total
		FROM (SELECT wh.order_num AS lot, SUM(wh.amount) AS inAmount
		FROM WAREHOUSE_HISTORY wh
		WHERE wh.io = 'IN' AND wh.mapd_code = #{vo.product}
		GROUP BY lot) AS inWH
		LEFT JOIN
		(SELECT SUBSTRING_INDEX(wh.order_num, '/', 1) AS lot, SUM(wh.amount) AS
		outAmount
		FROM WAREHOUSE_HISTORY wh
		WHERE wh.io = 'OUT' AND wh.mapd_code = #{vo.product}
		GROUP BY lot) AS outWH
		ON inWH.lot = outWH.lot) AS T
		WHERE T.Total >= 1;
	</select>

	<!-- 창고입출고내역에 코드 넣기 -->
	<insert id="insertHistory">
		insert into WAREHOUSE_HISTORY
		values (#{vo.wareHistory_code},#{order_num},#{vo.ware_code},
		'OUT','완제품',#{total},#{vo.product},#{vo.reg_emp},now())
	</insert>

	<select id="getMaterial" resultType="String">
		select distinct material
		from LOT
		where lot = #{lotNumber}
	</select>


	<!-- LOT 테이블에 값 넣기 -->
	<insert id="insertLOT">
		insert into LOT (lot, material,shipment)
		values (#{lot},"gkgkgk",#{vo.code})
	</insert>



	<!-- LOT 테이블에서 데이터 지우기 -->
	<delete id="deleteLOTUpdate">
		delete from LOT
		where SHIPMENT in
		<foreach item="item" index="index" collection="code" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<!-- 입출고 테이블에서 데이터 지우기 -->
	<delete id="deleteHistoryUpdate">
		delete from WAREHOUSE_HISTORY
		where
		<foreach item="item" index="index" collection="code"
			separator=" or " close="">
			order_num LIKE concat('%',#{item})
		</foreach>
	</delete>


	<!-- 출하정보리스트로 가져오기(큐알코드용) -->
	<select id="getShipmentInfoList" resultType="ShipmentVO">
		SELECT sp.* , c.name clientName, r.product product, r.unit unit,
		r.amount reqsamount
		from SHIPMENT sp
		join REQUEST r on r.code = sp.reqs_code
		join STOCK_VIEW s on sp.ware_code = s.warehouse
		join CLIENT c on r.client_code = c.code
		where sp.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
		GROUP BY sp.code, c.name, r.product, r.unit, r.amount
	</select>

	<!-- 수주정보리스트로 가져오기(큐알코드용) -->
	<select id="getRequestInfoList" resultType="RequestVO">
		SELECT distinct r.*, c.name clientName, m.name productName,
		c.address startDate ,c.address2 endDate, c.tel startDead
		from REQUEST r
		join
		CLIENT c on r.client_code = c.code
		join STOCK_VIEW s on r.product = s.code
		join MAPD m on r.product = m.code
		where r.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</select>


	<!-- 출하완료 처리 -->
	<update id="updateStatusToRequest">
		UPDATE REQUEST r
		INNER JOIN SHIPMENT s ON r.code= s.reqs_code
		SET
		r.status = '출하완료'
		WHERE s.code IN
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
			#{codeNum}
		</foreach>
	</update>

	<update id="updateStatusToShipment">
		UPDATE SHIPMENT s
		SET s.status = '출하완료'
		WHERE s.code IN
		<foreach collection="code" item="codeNum" open="(" close=")" separator=",">
			#{codeNum}
		</foreach>
	</update>

	<update id="receiptToClient">
		UPDATE REQUEST
		set status = '수령'
		WHERE code IN
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>

</mapper>