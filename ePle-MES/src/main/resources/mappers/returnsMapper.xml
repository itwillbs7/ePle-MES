<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- returnsMapper.xml -->
<mapper namespace="com.itwillbs.mapper.returnsMapper">
	<!-- 페이징처리 + 리스트 가져오기 -->
	<select id="listPage" resultType="ReturnsVO">
		select rt.*, c.name clientName
		FROM RETURNS rt
		join REQUEST r on rt.request_code = r.code
		join CLIENT c on r.client_code = c.code
		order by rt.reg_date DESC
		limit #{startPage}, #{pageSize}
	</select>

	<!-- 전체 글 개수 조회 -->
	<select id="countReturns" resultType="int">
  <![CDATA[
  	select count(*) from RETURNS where 1=1
  ]]>
	</select>

	<!-- 반품번호의 정보 가져오기 -->
	<select id="getReturnsInfo" resultType="ReturnsVO">
		SELECT rt.*, c.name clientName, s.date reqsdate, s.amount
		from RETURNS rt
		join REQUEST r on rt.request_code = r.code
		join CLIENT c on r.client_code = c.code
		join SHIPMENT s on s.code = rt.ship_code
		where rt.code = #{code}

	</select>


	<!-- ================================================================= add/search -->
	<!-- 출하번호 검색하기(출하번호,수주번호,출하량, 출하일자,수주업체 -->
	<select id="selectShipmentCodeList" resultType="ShipmentVO">
		select distinct s.code code, s.reqs_code reqs_code,
		s.amount amount, s.date date, c.name clientName, r.product product,
		r.unit unit
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on c.code = r.client_code
		join INSTRUCTION i on i.request = r.code
		join RESULT rs on i.code = rs.inst_code
		where s.status in ('출하완료','수령')
		<if test="code != null"> AND s.code = #{code} </if>
	</select>

	<select id="findShipment" resultType="ShipmentVO">
		select s.code, s.reqs_code, s.amount, s.date, c.name
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code 
		join CLIENT c on c.code = r.client_code 
		join MAPD m on r.product = m.code
		where s.status in ('출하완료','수령')
		<if test="productName!= null"> AND m.name like concat('%',#{productName},'%') </if>
		<if test="clientName != null"> AND c.name like concat('%',#{clientName},'%') </if>
	</select>

	<select id="getLOTList" resultType="ReturnsVO">
		select l.lot lot
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join INSTRUCTION i on i.request = r.code
		join RESULT rs on i.code = rs.inst_code
		join LOT l on rs.code = l.lot
		where l.shipment = #{ship_code}
		and i.request = #{request_code}
	</select>

	<!-- ================================================================= add/search -->




	<!-- 반품정보 검색하기 -->
	<select id="research" resultType="ReturnsVO">
		select rt.*, c.name clientName
		from RETURNS rt
		join REQUEST r on rt.request_code = r.code
		join CLIENT c on c.code = r.client_code
		join SHIPMENT s on s.code = rt.ship_code
		where 1 = 1
		<if test="clientName neq null and clientName.toString() neq '' "> AND c.name = #{clientName} </if>
		<if test="product neq null and product.toString() neq ''"> AND r.product = #{product} </if>
		<if test="manager neq null and manager.toString() neq '' "> AND r.manager = #{manager} </if>
		<if test="date neq null and date.toString() neq '' ">
			<choose>
				<when test="endDate neq null and endDate.toString() neq '' ">AND r.date between #{startDate} and #{endDate}
				</when>
				<otherwise>ND r.date = #{startDate} </otherwise>
			</choose>
		</if>
		<if test="statusList != null and statusList.size() > 0">
			AND rt.status in
			<foreach collection="statusList" item="status" open="(" close=")" separator=",">
				#{status}
			</foreach>
		</if>
		order by r.reg_date DESC
	</select>
	
	<!-- 수주번호 가져오기 -->
	<select id="getRecentCode" resultType="String">
		SELECT code FROM RETURNS WHERE code LIKE concat(#{result},'%') ORDER BY reg_date DESC LIMIT 0, 1
	</select>

	<!-- 반품정보 등록하기 -->
	<insert id="insertReturns">
		insert into RETURNS
		values
		(#{code},#{request_code},#{ship_code},#{lot},#{date},#{amount},#{unit},#{reason}
		"등록",1,now(),"test",now(),"test");
	</insert>

	<!-- 반품정보 수정하기 -->
	<update id="updateReturnsInfo">
		update RETURNS set request_code=#{vo.request_code}, 
		ship_code=#{vo.ship_code}, lot=#{vo.lot}, date=#{vo.date}, amount=#{vo.amount}, unit=#{vo.unit}, 
		status=#{vo.status}, update_date=now(), update_emp=#{userid}
		where code = #{vo.code}
	</update>

	<!-- 반품정보 삭제하기 -->
	<select id="getDeleteInfo" resultType="ReturnsVO">
		SELECT r.code, r.request_code, r.date , r.lot, r.amount
		from RETURNS r
		join REQUEST rq on r.request_code = rq.code
		join CLIENT c
		on rq.client_code = c.code
		where r.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</select>
	
	<update id="updateStatusBeforeDelete">
		update REQUEST r
		inner join RETURNS rt on r.code= rt.request_code
		set r.status = '출하완료'
		where s.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>

	<delete id="deleteReturnsData">
		delete from RETURNS
		where code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</delete>
	
	

	<!-- 반품상태 폐기수정 -->
	<update id="statusChangetoDispose">
		update RETURNS set status="폐기완료", dispose=1
		where code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>
</mapper>