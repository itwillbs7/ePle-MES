<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- returnsMapper.xml -->
<mapper namespace="com.itwillbs.mapper.returnsMapper">
	<!-- 페이징처리 + 리스트 가져오기 -->
	<select id="listPage" resultType="ReturnsVO">
		select rt.*, c.name clientName
		FROM RETURNS rt
		join REQUEST r on rt.request_code = r.code
		join CLIENT c
		on r.client_code = c.code
		order by rt.reg_date DESC
		limit #{startPage},
		#{pageSize}
	</select>

	<!-- 전체 글 개수 조회 -->
	<select id="countReturns" resultType="int">
  <![CDATA[
  	select count(*) 
  	from RETURNS rt
  	join REQUEST r on rt.request_code = r.code
	join CLIENT c on c.code = r.client_code
	join SHIPMENT s on s.code = rt.ship_code
  	where 1=1
  ]]>
  <if test="vo.clientName neq null and vo.clientName.toString() neq '' "> AND c.name = #{vo.clientName} </if>
		<if test="vo.product neq null and vo.product.toString() neq ''"> AND r.product = #{vo.product} </if>
		<if test="vo.manager neq null and vo.manager.toString() neq '' "> AND r.manager = #{vo.manager} </if>
		<if test="vo.date neq null and vo.date.toString() neq '' ">
			<choose>
				<when
					test="vo.endDate neq null and vo.endDate.toString() neq '' ">
					AND r.date between #{vo.startDate} and #{vo.endDate}
				</when>
				<otherwise>AND r.date = #{vo.startDate} </otherwise>
			</choose>
		</if>
		<if test="vo.statusList != null and vo.statusList.size() > 0">
			AND rt.status in
			<foreach collection="vo.statusList" item="status" open="("
				close=")" separator=",">
				#{status}
			</foreach>
		</if>
	</select>

	<!-- 반품정보 검색하기 -->
	<select id="research" resultType="ReturnsVO">
		select rt.*, c.name clientName
		from RETURNS rt
		join REQUEST r on rt.request_code = r.code
		join CLIENT c on c.code = r.client_code
		join SHIPMENT s on s.code = rt.ship_code
		join EMPLOYEES e on e.code = r.manager
		join MAPD m on m.code = r.product
		where 1 = 1
		<if test="vo.clientName neq null and vo.clientName.toString() neq '' "> AND c.name = #{vo.clientName} </if>
		<if test="vo.product neq null and vo.product.toString() neq ''"> AND r.product = #{vo.product} </if>
		<if test="vo.manager neq null and vo.manager.toString() neq '' "> AND r.manager = #{vo.manager} </if>
		<if test="vo.date neq null and vo.date.toString() neq '' ">
			<choose>
				<when
					test="vo.endDate neq null and vo.endDate.toString() neq '' ">
					AND r.date between #{vo.startDate} and #{vo.endDate}
				</when>
				<otherwise>AND r.date = #{vo.startDate} </otherwise>
			</choose>
		</if>
		<if test="vo.statusList != null and vo.statusList.size() > 0">
			AND rt.status in
			<foreach collection="vo.statusList" item="status" open="("
				close=")" separator=",">
				#{status}
			</foreach>
		</if>
		order by r.reg_date DESC
		limit #{cri.startPage}, #{cri.pageSize}
	</select>

	<!-- 반품번호의 정보 가져오기 -->
	<select id="getReturnsInfo" resultType="ReturnsVO">
		SELECT rt.*, c.name
		clientName, s.date reqsdate, s.amount
		from RETURNS rt
		join REQUEST r on
		rt.request_code = r.code
		join CLIENT c on r.client_code = c.code
		join
		SHIPMENT s on s.code = rt.ship_code
		where rt.code = #{code}

	</select>


	<!-- ================================================================= add/search -->
	<!-- 코드로 출하번호 검색하기(출하번호,수주번호,출하량, 출하일자,수주업체 -->
	<select id="selectShipmentCodeList" resultType="ShipmentVO">
		select distinct s.code code, s.reqs_code reqs_code,
		s.amount amount,
		s.date date, c.name clientName, r.product product,
		r.unit unit
		from
		SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on
		c.code = r.client_code
		join INSTRUCTION i on i.request = r.code
		join
		RESULT rs on i.code = rs.inst_code
		where s.status in ('출하완료','수령')
		<if test="code != null"> AND s.code = #{code} </if>
	</select>

	<!-- 팝업검색창 리스트 불러오기 -->
	<select id="findShipmentCRI" resultType="ShipmentVO">
		select s.code,
		s.reqs_code , s.amount, s.date, c.name clientName
		from SHIPMENT s
		join
		REQUEST r on s.reqs_code = r.code
		join CLIENT c on c.code =
		r.client_code
		join MAPD m on r.product = m.code
		where s.status in
		('출하완료','수령')
		LIMIT #{startPage},#{pageSize}
	</select>
	<!-- 팝업검색창 리스트 불러오기 -->
	<select id="findShipment" resultType="ShipmentVO">
		select s.code, s.reqs_code , s.amount, s.date, c.name clientName
		from
		SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on
		c.code = r.client_code
		join MAPD m on r.product = m.code
		where s.status
		in ('출하완료','수령')
		<if test="productName!= null and product != ''"> AND m.name like concat('%',#{productName},'%') </if>
		<if test="clientName != null and clientName != ''"> AND c.name like concat('%',#{clientName},'%') </if>
		LIMIT #{cri.startPage},#{cri.pageSize}
	</select>

	<select id="getShipmetTotal" resultType="int">
		select count(*)
		from SHIPMENT s
		join REQUEST r on s.reqs_code = r.code
		join CLIENT c on c.code = r.client_code
		join MAPD m on r.product =
		m.code
		where s.status in ('출하완료','수령')
		<if test="productName!= null and product != ''"> AND m.name like concat('%',#{productName},'%') </if>
		<if test="clientName != null and clientName != ''"> AND c.name like concat('%',#{clientName},'%') </if>
	</select>

	<select id="getLOTList" resultType="ReturnsVO">
	select SUBSTRING_INDEX(order_num, '/', 1) as lot, amount amount
	from WAREHOUSE_HISTORY 
	where order_num like concat('%',#{ship_code})

	</select>

	<!-- ================================================================= add/search -->





	<!-- 수주번호 가져오기 -->
	<select id="getRecentCode" resultType="String">
		SELECT code FROM RETURNS
		WHERE code LIKE concat(#{result},'%') ORDER BY reg_date DESC LIMIT 0,
		1
	</select>

	<!-- 반품정보 등록하기 -->
	<insert id="insertReturns">
		insert into RETURNS
		values (#{code},#{request_code},#{ship_code},#{lot},#{date},#{amount},#{unit},#{reason},
		"등록",1,now(),"test",now(),"test");
	</insert>
	
	<!-- 반품정보 등록 시 수주정보 상태 변경 -->
	<update id="updateRequestStatus">
		update REQUEST set status='반품' where code = #{request}
	</update>

	<!-- 반품정보 수정하기 -->
	<update id="updateReturnsInfo">
		update RETURNS set request_code=#{vo.request_code},
		ship_code=#{vo.ship_code}, lot=#{vo.lot}, date=#{vo.date},
		amount=#{vo.amount}, unit=#{vo.unit},
		status=#{vo.status},
		update_date=now(), update_emp=#{userid}
		where code = #{vo.code}
	</update>

	<!-- 반품정보 삭제하기 -->
	<select id="getDeleteInfo" resultType="ReturnsVO">
		SELECT r.code, r.request_code, r.date , r.lot, r.amount
		from RETURNS r
		join REQUEST rq on r.request_code = rq.code
		join CLIENT c
		on
		rq.client_code = c.code
		where r.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</select>

	<update id="updateStatusBeforeDelete">
		update REQUEST r
		inner join RETURNS rt on r.code= rt.request_code
		set
		r.status = '출하완료'
		where s.code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>

	<delete id="deleteReturnsData">
		delete from RETURNS
		where code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</delete>



	<!-- 반품상태 폐기수정 -->
	<update id="statusChangetoDispose">
		update RETURNS set status="폐기완료", dispose=1
		where code in
		<foreach collection="code" item="codeNum" open="(" close=")"
			separator=",">
			#{codeNum}
		</foreach>
	</update>
</mapper>